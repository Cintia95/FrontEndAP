{"ast":null,"code":"import _asyncToGenerator from \"C:/ArgentinaPrograma/miProyecto/ProyectoAP/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport { getDownloadURL, list, ref, uploadBytes } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/storage\";\nexport let ProyectosService = /*#__PURE__*/(() => {\n  class ProyectosService {\n    constructor(httpClient, storage) {\n      this.httpClient = httpClient;\n      this.storage = storage;\n      this.URL = environment.URL + 'proyectos/';\n      this.urlP = \"\";\n    }\n    lista() {\n      return this.httpClient.get(this.URL + 'lista');\n    }\n    detail(id) {\n      return this.httpClient.get(this.URL + `detail/${id}`);\n    }\n    save(proyectos) {\n      return this.httpClient.post(this.URL + 'create', proyectos);\n    }\n    update(id, proyectos) {\n      return this.httpClient.put(this.URL + `update/${id}`, proyectos);\n    }\n    delete(id) {\n      return this.httpClient.delete(this.URL + `delete/${id}`);\n    }\n    uploadImagen($event, name, id) {\n      const file = $event.target.files[0];\n      const imgRef = ref(this.storage, `proyectos/` + name);\n      uploadBytes(imgRef, file).then(response => {\n        this.getImages(id);\n      }).catch(error => console.log(error));\n    }\n    getImages(id) {\n      var _this = this;\n      const imagesRef = ref(this.storage, 'proyectos');\n      id;\n      var arrayURLs = new Array();\n      list(imagesRef).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (response) {\n          for (let item of response.items) {\n            arrayURLs.push(yield getDownloadURL(item));\n          }\n          _this.urlP = arrayURLs[id];\n          console.log(\"La url de esta imagen es: \" + _this.urlP);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(error => console.log(error));\n    }\n  }\n  ProyectosService.ɵfac = function ProyectosService_Factory(t) {\n    return new (t || ProyectosService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Storage));\n  };\n  ProyectosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProyectosService,\n    factory: ProyectosService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProyectosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}