{"ast":null,"code":"import _asyncToGenerator from \"C:/ArgentinaPrograma/miProyecto/ProyectoAP/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport { list, ref, uploadBytes } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/storage\";\nexport class ProyectosService {\n  constructor(httpClient, storage) {\n    this.httpClient = httpClient;\n    this.storage = storage;\n    this.URL = environment.URL + 'proyectos/';\n    this.urlP = \"\";\n  }\n  lista() {\n    return this.httpClient.get(this.URL + 'lista');\n  }\n  detail(id) {\n    return this.httpClient.get(this.URL + `detail/${id}`);\n  }\n  save(proyectos) {\n    return this.httpClient.post(this.URL + 'create', proyectos);\n  }\n  update(id, proyectos) {\n    return this.httpClient.put(this.URL + `update/${id}`, proyectos);\n  }\n  delete(id) {\n    return this.httpClient.delete(this.URL + `delete/${id}`);\n  }\n  uploadImagen($event, name) {\n    const file = $event.target.files[0];\n    const imgRef = ref(this.storage, `proyectos/` + name);\n    uploadBytes(imgRef, file).then(response => {\n      this.getImages();\n    }).catch(error => console.log(error));\n  }\n  getImages() {\n    const imagesRef = ref(this.storage, 'proyectos');\n    list(imagesRef).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        console.log(response);\n        // for(let item of response.items){\n        //   this.urlP = await getDownloadURL(item);\n        //}\n        alert(\"Imagen subida\");\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).catch(error => console.log(error));\n  }\n}\nProyectosService.ɵfac = function ProyectosService_Factory(t) {\n  return new (t || ProyectosService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Storage));\n};\nProyectosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProyectosService,\n  factory: ProyectosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA,SAASA,WAAW,QAAQ,8BAA8B;AAE1D,SAAyBC,IAAI,EAAEC,GAAG,EAAWC,WAAW,QAAQ,uBAAuB;;;;AAKvF,OAAM,MAAOC,gBAAgB;EAI3BC,YAAoBC,UAAuB,EAAUC,OAAgB;IAAjD,eAAU,GAAVD,UAAU;IAAuB,YAAO,GAAPC,OAAO;IAH5D,QAAG,GAAGP,WAAW,CAACQ,GAAG,GAAG,YAAY;IACpC,SAAI,GAAW,EAAE;EAEwD;EAElEC,KAAK;IACV,OAAO,IAAI,CAACH,UAAU,CAACI,GAAG,CAAc,IAAI,CAACF,GAAG,GAAG,OAAO,CAAC;EAC7D;EAEOG,MAAM,CAACC,EAAU;IACtB,OAAO,IAAI,CAACN,UAAU,CAACI,GAAG,CAAY,IAAI,CAACF,GAAG,GAAG,UAAUI,EAAE,EAAE,CAAC;EAClE;EAEOC,IAAI,CAACC,SAAoB;IAC9B,OAAO,IAAI,CAACR,UAAU,CAACS,IAAI,CAAM,IAAI,CAACP,GAAG,GAAG,QAAQ,EAAEM,SAAS,CAAC;EAClE;EAEOE,MAAM,CAACJ,EAAU,EAAEE,SAAoB;IAC5C,OAAO,IAAI,CAACR,UAAU,CAACW,GAAG,CAAM,IAAI,CAACT,GAAG,GAAG,UAAUI,EAAE,EAAE,EAAEE,SAAS,CAAC;EACvE;EAEOI,MAAM,CAACN,EAAU;IACtB,OAAO,IAAI,CAACN,UAAU,CAACY,MAAM,CAAM,IAAI,CAACV,GAAG,GAAG,UAAUI,EAAE,EAAE,CAAC;EAC/D;EAEOO,YAAY,CAACC,MAAW,EAAEC,IAAY;IAC3C,MAAMC,IAAI,GAAGF,MAAM,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACnC,MAAMC,MAAM,GAAGvB,GAAG,CAAC,IAAI,CAACK,OAAO,EAAE,YAAY,GAAEc,IAAI,CAAC;IACpDlB,WAAW,CAACsB,MAAM,EAAEH,IAAI,CAAC,CACxBI,IAAI,CAACC,QAAQ,IAAG;MAAE,IAAI,CAACC,SAAS,EAAE;IAAA,CAAC,CAAC,CACpCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACrC;EAEAF,SAAS;IACP,MAAMK,SAAS,GAAG/B,GAAG,CAAC,IAAI,CAACK,OAAO,EAAE,WAAW,CAAC;IAChDN,IAAI,CAACgC,SAAS,CAAC,CACdP,IAAI;MAAA,6BAAC,WAAMC,QAAQ,EAAG;QACrBI,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;QACrB;QACA;QACA;QACAO,KAAK,CAAC,eAAe,CAAC;MACxB,CAAC;MAAA;QAAA;MAAA;IAAA,IAAC,CACDL,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACrC;;AA7CW1B,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAA+B,SAAhB/B,gBAAgB;EAAAgC,YAFf;AAAM","names":["environment","list","ref","uploadBytes","ProyectosService","constructor","httpClient","storage","URL","lista","get","detail","id","save","proyectos","post","update","put","delete","uploadImagen","$event","name","file","target","files","imgRef","then","response","getImages","catch","error","console","log","imagesRef","alert","factory","providedIn"],"sourceRoot":"","sources":["C:\\ArgentinaPrograma\\miProyecto\\ProyectoAP\\FrontEnd\\src\\app\\service\\proyectos.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Proyectos } from '../model/proyectos';\nimport { getDownloadURL, list, ref, Storage, uploadBytes } from '@angular/fire/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProyectosService {\n  URL = environment.URL + 'proyectos/';\n  urlP: string = \"\";\n\n  constructor(private httpClient : HttpClient, private storage: Storage) { }\n\n  public lista(): Observable<Proyectos[]>{\n    return this.httpClient.get<Proyectos[]>(this.URL + 'lista');\n  }\n\n  public detail(id: number): Observable<Proyectos>{\n    return this.httpClient.get<Proyectos>(this.URL + `detail/${id}`);\n  }\n\n  public save(proyectos: Proyectos): Observable<any>{\n    return this.httpClient.post<any>(this.URL + 'create', proyectos);\n  }\n\n  public update(id: number, proyectos: Proyectos): Observable<any>{\n    return this.httpClient.put<any>(this.URL + `update/${id}`, proyectos);\n  }\n\n  public delete(id: number): Observable<any>{\n    return this.httpClient.delete<any>(this.URL + `delete/${id}`);\n  }\n\n  public uploadImagen($event: any, name: string){\n    const file = $event.target.files[0]\n    const imgRef = ref(this.storage, `proyectos/`+ name)\n    uploadBytes(imgRef, file)\n    .then(response => {this.getImages()})\n    .catch(error => console.log(error))\n  }\n\n  getImages(){\n    const imagesRef = ref(this.storage, 'proyectos')\n    list(imagesRef)\n    .then(async response => {\n      console.log(response);\n      // for(let item of response.items){\n      //   this.urlP = await getDownloadURL(item);\n      //}\n      alert(\"Imagen subida\");\n    })\n    .catch(error => console.log(error))\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}